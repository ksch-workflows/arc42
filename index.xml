<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Administration Architecture Documentation</title><link>https://ksch-workflows.github.io/administration/</link><description>Recent content on Administration Architecture Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://ksch-workflows.github.io/administration/index.xml" rel="self" type="application/rss+xml"/><item><title>Building block view</title><link>https://ksch-workflows.github.io/administration/05_building-block-view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/05_building-block-view/</guid><description/></item><item><title>Constraints</title><link>https://ksch-workflows.github.io/administration/02_constraints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/02_constraints/</guid><description/></item><item><title>Context and scope</title><link>https://ksch-workflows.github.io/administration/03_context-and-scope/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/03_context-and-scope/</guid><description/></item><item><title>Crosscutting concepts</title><link>https://ksch-workflows.github.io/administration/08_crosscutting-concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/08_crosscutting-concepts/</guid><description/></item><item><title>Deployment view</title><link>https://ksch-workflows.github.io/administration/07_deployment-view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/07_deployment-view/</guid><description/></item><item><title>Domain Driven Design</title><link>https://ksch-workflows.github.io/administration/04_solution-strategy/ddd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/04_solution-strategy/ddd/</guid><description>Motivation Form follows function
The purpose of this software system is to support the day-to-day processes in the Kirpal Sagar Charitable Hospital. How the system is structured internally is a secondary matter. What is important is that it supports the functional and operational requirements of the hospital staff. Further, it is important that the system can be molded when there the requirements are changing. So when new developers are coming into the system, it should be fairly easy for them to add new features or adapt existing features.</description></item><item><title>Glossary</title><link>https://ksch-workflows.github.io/administration/12_glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/12_glossary/</guid><description/></item><item><title>Imprint</title><link>https://ksch-workflows.github.io/administration/imprint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/imprint/</guid><description>Impressum Angaben gemäß § 5 TMG: Jan Mewes
Lutherstraße 169
07743 Jena Germany Kontakt: Telefon: 03641-5519411 E-Mail: ksch-workflows@experimental-software.com Verantwortlich für den Inhalt nach § 55 Abs. 2 RStV: Thema der Webseite: Softwareentwicklung
Jan Mewes
Lutherstraße 169
07743 Jena
Germany Quelle: https://www.e-recht24.de
Haftungsausschluss (Disclaimer) Haftung für Inhalte
Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen.</description></item><item><title>Introduction and goals</title><link>https://ksch-workflows.github.io/administration/01_introduction-and-goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/01_introduction-and-goals/</guid><description> The software needs to be reliable. Thus the source code should have maximum simplicity. The software needs to be simple to operate, so that the KSCH staff can operate is by themselves. The software needs to be fast. There should be no vendor lock-in so that the KSCH doesn&amp;rsquo;t have a strong binding dependency on any external company.</description></item><item><title>Java application architecture style</title><link>https://ksch-workflows.github.io/administration/09_architecture-decisions/2021-05-08_backend-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/09_architecture-decisions/2021-05-08_backend-architecture/</guid><description>Context There needs to be a concept for the module structure of the backend server.
Design goals The business logic of the software needs to be very flexible, so that it can be adjusted to changing requirements of the KSCH. The system needs to have good testability, so that there can be a very good test coverage for those business rules. Enable hobby developer to contribute to the project in limited spare time.</description></item><item><title>Quality</title><link>https://ksch-workflows.github.io/administration/10_quality/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/10_quality/</guid><description/></item><item><title>Risks and technical debt</title><link>https://ksch-workflows.github.io/administration/11_risks-and-technical-dept/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/11_risks-and-technical-dept/</guid><description/></item><item><title>Runtime view</title><link>https://ksch-workflows.github.io/administration/06_runtime-view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/06_runtime-view/</guid><description/></item><item><title>Testing</title><link>https://ksch-workflows.github.io/administration/04_solution-strategy/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/04_solution-strategy/testing/</guid><description>Rules of thumb In general, write a test class for every class in the production code. References TBD</description></item><item><title>Use Flutter as framework for frontend</title><link>https://ksch-workflows.github.io/administration/09_architecture-decisions/2021-03-05_frontend-technology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/09_architecture-decisions/2021-03-05_frontend-technology/</guid><description>Alternatives (A) Apache Wicket Pros Powerful framework to create Java based web applications. Relativly small learning curve for new contributors. Supports the reaction of a well designed, modular page structure. Very active community. The framework is time-tested and stable. Cons Adding pages with highly dynamic content requires JavaScript which is possible to be hooked into Wicket applications but this gets more and more complicated and thus goes against the goal of maximum simplicity of the source code.</description></item><item><title>Use Google App Engine for the deployment of the staging environment</title><link>https://ksch-workflows.github.io/administration/09_architecture-decisions/2021-03-05_backend-technoglogy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/09_architecture-decisions/2021-03-05_backend-technoglogy/</guid><description>Context In order to iterative development cycles for acceptance testing and user experience design, it is necessary provide the software in a publicly accessible domain. Since the instance will only be sporadicly used at random times, having an always online instance hosted on a rented virtual machine would be wasteful.
Alternatives (A) AWS Lambda Pros AWS offers lots of powerful features to build web applications. The usage based pricing plans lead to fair operational costs.</description></item><item><title>Use Java instead of Kotlin</title><link>https://ksch-workflows.github.io/administration/09_architecture-decisions/2021-03-07_java-vs-kotlin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ksch-workflows.github.io/administration/09_architecture-decisions/2021-03-07_java-vs-kotlin/</guid><description>Context Kotlin tries to solve some of the problem in the design of the Java programming language. There are many senior developers which advocate to use Kotlin over Java. Also it is preferred by many mid-level developers.
Alternatives (A) Java Pros Very broadly used Many tools which support the language Lots of tutorials Cons Verbose syntax No null safety (B) Kotlin Pros Null safety Good reputation Enables to write elegant code Cons Pushes for certain design ideas (e.</description></item></channel></rss>